#import "template.typ" as template: *
#import "/src/lib.typ" as moodular

#import "@preview/cheq:0.2.2": checklist
#import "@preview/crudo:0.1.1"

#show: manual(
  package-meta: toml("/typst.toml").package,
  title: [Moodular],
  subtitle: [Use Typst's HTML export to generate content for your Moodle courses],
  date: datetime(year: 2025, month: 8, day: 10),

  // logo: rect(width: 5cm, height: 5cm),
  abstract: [
    With Typst's upcoming HTML export, a new opportunity for using Typst in teaching opens up:
    in addition to worksheets and other printed/printable resources, content in learning management systems (LMS) can be created with Typst.
    This package provides tools for writing materials targeting HTML tailored for Moodle, helps previewing HTML content in the Typst webapp or Tinymist,
    and integrates the Components for Learning (C4L) that offer a rich visual and semantic language for structuring information.
  ],

  scope: (moodular: moodular),
)

= Introduction

This package allows you to use Typst's HTML export to generate content for your Moodle courses, but preview them faithfully in Tinymist or the webapp, or target PDF in addition to Moodle.

This package is somewhat opinionated, as it contains features tailored towards specific Moodle plugins used at our own school:

- #link("https://componentsforlearning.org/")[Components for Learning (C4L)] (#link("https://moodle.org/plugins/atto_c4l")[Atto]/#link("https://moodle.org/plugins/tiny_c4l")[TinyMCE] plugin): Moodular recreates the HTML structure of C4L blocks, and also renders them for PDF export.

== HTML preview and export

one of Moodular's main features is setting up your document for HTML-equivalent preview.
This includes using a single unlimited-height page, using a sans serif font for text, and showing links in blue and underlined.
Other aspects of this include the display of blockquotes and raw blocks, which are styled to match Moodle's Boost theme's default style.

To get started apply Moodular's settings like this:

#context crudo.map(
  ```typ
  #import "/src/lib.typ" as moodular: c4l

  #show: moodular.preview()
  // or
  #show: moodular.export()
  ```,
  line => line.replace("/src/lib.typ", package-import-spec()),
)

#ref-fn("preview()") is the right choice if you only want HTML export, and use "regular" mode only to preview.
If you want to instead target both HTML and PDF exports, #ref-fn("export()") is what you want: it won't change the page setup, but apply other styles.
Both are just wrappers around #ref-fn("setup()");; the exact behavior is documented there.

== Components for Learning (C4L)

A huge part of this package is providing the #link("https://componentsforlearning.org/")[Components for Learning (C4L)] features.
Most but not all components are currently supported:

#columns(3)[
  #set heading(numbering: none, outlined: false)
  #show: checklist.with(marker-map: (
    " ": box(height: 0.85em, move(dy: -3pt, emoji.crossmark)),
    "x": box(height: 0.85em, move(dy: -3pt, emoji.checkmark.box)),
  ))

  #let ref-c4l(name, body) = link(label("c4l." + name + "()"), body)

  === Contextual components

  - [x] #ref-c4l("do-dont")[Do/Don't Cards]
  - [x] #ref-c4l("example")[Example]
  - [x] #ref-c4l("figure")[Figure]
  - [ ] Inline Tag
  - [x] #ref-c4l("key-concept")[Key concept]
  - [x] #ref-c4l("quote")[Quote]
  - [x] #ref-c4l("reading-context")[Reading Context]
  - [x] #ref-c4l("reminder")[Reminder]
  #colbreak()
  #v(4.5pt)
  - [ ] Tag
  - [x] #ref-c4l("tip")[Tip]

  === Procedural components

  - [x] #ref-c4l("attention")[Attention]
  - [ ] Due Date
  - [ ] Estimated time
  - [x] #ref-c4l("learning-outcomes")[Learning Outcomes]
  - [x] #ref-c4l("procedural-context")[Procedural Context]
  #colbreak()

  === Evaluative components

  - [x] #ref-c4l("expected-feedback")[Expected Feedback]
  - [ ] Grading Value

  === Helper components

  - [x] #ref-c4l("card")[All-purpose card]
]

The #link("https://github.com/SillyFreak/typst-moodular/tree/main/gallery")[gallery] has a document previewing some components, and you can click on the implemented components above to go to their docs, including rendered examples.
Please open an issue at https://github.com/SillyFreak/typst-moodular/issues if you need one of the missing components.

C4L components generated by the C4L Moodle plugins start with ```html <p class="c4l-spacer"></p>```, which seems to actually have a negative effect on spacing.
By default, Moodular does not remove the spacer to remain consistent with the official plugins, but provides the #ref-fn("c4l.remove-spacer()") function in case this affects you. See that function for details.

== Show rules for specific elements

There are some Typst elements that are transformed by Moodular to either ensure they look like Moodle when exporting to PDF, or that they are picked up correctly by Moodle when exporting to HTML (the latter category may shrink as Typst's HTML support matures).

=== Blockquotes

Blockquotes can e.g. be created by using Markdown syntax in Moodle:

```md
> quote
```

Moodle displays these with lighter colored text and a left gray bar.
To make sure a Typst blockquote is displayed the same in both HTML and PDF, Moodular styles them with a show rule when outputting to PDF:

#man-style.show-example(
  dir: ttb,
  scale-preview: 100%,
  scope: (moodular: moodular),
  ```typ
  >>> #show: moodular.export()
  #quote(block: true)[#lorem(20)]
  ```
)

=== raw code blocks

Code blocks can be syntax-highlighted by Moodle if the language is specified.
The correct markup for this are nested ```html <pre class="language-..."><code>``` tags.
Typst will get these (see #link("https://github.com/typst/typst/pull/6701")[typst\#6701] and #link("https://github.com/typst/typst/pull/6702")[typst\#6702]), but for now Moodular transforms raw blocks to the correct shape.

When exporting to PDF, Moodular matches Moodle's background color for code blocks:

#man-style.show-example(
  dir: ttb,
  scale-preview: 100%,
  scope: (moodular: moodular),
  ````typ
  >>> #show: moodular.export()
  ```py
  print("Hello, world!")  # this is an example
  ```
  ````
)

=== Images

Typst's HTML export does not support outputting multiple files, so it can't support images yet. There are two ways in which Moodular can handle this:

==== #ref-fn("frame()")

```typ
#moodular.frame(image("..."))
```
Using #ref-fn("frame()"), the contained content is embedded in the output HTML as SVG.
Images within that content are base64-encoded.
Note that base64 is an inefficient encoding, but for very small images like icons it may be a convenient option.

==== `<img>` elements

Images not inside a #ref-fn("frame()") are transformed by Moodular into ```html <img>``` tags during HTML export.
Specifically, an image like

```typ
#moodular.frame(image("example.png", alt: "Example"))
```

is transformed into the following:

```html
<img src="@@PLUGINFILE@@/example.png" alt="Example" class="img-fluid">
```

Here, `@@PLUGINFILE@@` is a prefix internally used by Moodle to identify attachments referenced inside rich text editors.
What you should know about this is:

- When you are first transferring your HTML to Moodle, the image will naturally not be found.
  You will need to create an ```html <img>``` by uploading the image through the rich text editor's "insert image" option.
  That should create an element like this:

  ```html
  <img class="img-fluid"
    src=".../draftfile.php/.../user/draft/.../example.png"
    alt="Example" width="640" height="480">
  ```

- Moodle can now (after uploading the image; saving is not necessary) identify the image using the `example.png` filename.
  In fact, when saving the resource, the rest of the URL is removed by Moodle and replaced by `@@PLUGINFILE@@` because Moodle only needs this part when a user is editing.

- When you replace that HTML by what Moodular created, the preview will no longer display the image (since the `src` changed from a working draft URL on your Moodle site to a placeholder containing `@@PLUGINFILE@@`), but this does not impact how the image is saved when saving the whole resource.
  So, upon saving, you should see your content, including the uploaded and properly referenced image.

  - Note that the `width` and `height` attributes of the ```html <img>``` tag have not been preserved; Moodular currently doesn't offer a solution for this, but these missing attributes should mostly affect page layout while an image is still loading and not much more.

- When you now edit the same resource again, all images will be shown (the placeholder has been replaced by a draft URL again).
  Assuming your new content does not contain previously unknown images, you can simply replace the whole HTML by what Moodular produced again, and all uploaded images will be preserved.

=== C4L Blockquotes and figures

Apart from Typst's `#quote(block: true)` which is by default styled to match Moodle, C4L also provides a #link("https://componentsforlearning.org/components/quote/")[quote component], available as #ref-fn("c4l.quote()").
If you want all quotes in your document shown that way, you can use #ref-fn("c4l.blockquotes-as-c4l()");; see that function for more details.

Likewise, C4L provides a #link("https://componentsforlearning.org/components/figure/")[figure component]. You can apply #ref-fn("c4l.figures-as-c4l()") to your document to apply that component to all regular figures.
Note that C4L figures differ from Typst's only in HTML output; the PDF output is exactly the same.

= Module reference

#module(
  read("/src/lib.typ"),
  name: "moodular",
  label-prefix: none,
)

#module(
  read("/src/c4l/mod.typ"),
  name: "c4l",
  label-prefix: "c4l",
  scope: (
    c4l: moodular.c4l,
    c4l-example: (pad: none) => body => {
      show: moodular.export()
      show: it => {
        if pad == none { return it }
        show: std.pad.with(..pad)
        it
      }
      body
    }
  )
)
